/* tslint:disable */
/* eslint-disable */
/**
 * CGSO-Tagbilaran
 * CGSO-Tagbilaran API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActivatePersonDto
 */
export interface ActivatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof ActivatePersonDto
     */
    'person_code': string;
    /**
     * 
     * @type {string}
     * @memberof ActivatePersonDto
     */
    'activation_code': string;
    /**
     * 
     * @type {string}
     * @memberof ActivatePersonDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AddPersonDto
 */
export interface AddPersonDto {
    /**
     * 
     * @type {CreatePersonDto}
     * @memberof AddPersonDto
     */
    'person': CreatePersonDto;
    /**
     * 
     * @type {any}
     * @memberof AddPersonDto
     */
    'file'?: any;
}
/**
 * 
 * @export
 * @interface BidderControllerGetDataAsList200Response
 */
export interface BidderControllerGetDataAsList200Response {
    /**
     * 
     * @type {number}
     * @memberof BidderControllerGetDataAsList200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<GetBidderDto>}
     * @memberof BidderControllerGetDataAsList200Response
     */
    'data'?: Array<GetBidderDto>;
}
/**
 * 
 * @export
 * @interface BidderControllerGetDataAsList200ResponseAllOf
 */
export interface BidderControllerGetDataAsList200ResponseAllOf {
    /**
     * 
     * @type {Array<GetBidderDto>}
     * @memberof BidderControllerGetDataAsList200ResponseAllOf
     */
    'data'?: Array<GetBidderDto>;
}
/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'person_code': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'activation_code': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CoreApiPaginatedResponse
 */
export interface CoreApiPaginatedResponse {
    /**
     * 
     * @type {number}
     * @memberof CoreApiPaginatedResponse
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface CreateBidderDto
 */
export interface CreateBidderDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'street_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'subdivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'sitio'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'purok'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'barangay'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'municipality'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'tin'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateBidderDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateBidderDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateBidderDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBidderDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreateItemDto
 */
export interface CreateItemDto {
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'unit': string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'brand': string;
    /**
     * 
     * @type {number}
     * @memberof CreateItemDto
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateItemDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateItemDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateItemDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreatePersonDto
 */
export interface CreatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'suffix'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'civil_status': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'street_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'subdivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'sitio'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'purok'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'barangay'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'municipality'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'phone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePersonDto
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePersonDto
     */
    'is_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'activation_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'department': string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreatePersonDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreatePersonDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreatePrItemDto
 */
export interface CreatePrItemDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'purchase_request'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'item': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'unit': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePrItemDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'brand': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePrItemDto
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePrItemDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrItemDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreatePurchaseRequestDto
 */
export interface CreatePurchaseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'pr_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'pr_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'sai_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'sai_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'alobs_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'alobs_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'section'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'status'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePurchaseRequestDto
     */
    'is_urgent': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePurchaseRequestDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseRequestDto
     */
    'updated_by'?: string;
    /**
     * 
     * @type {Array<CreatePrItemDto>}
     * @memberof CreatePurchaseRequestDto
     */
    'items': Array<CreatePrItemDto>;
}
/**
 * 
 * @export
 * @interface CreateUtilsBrandDto
 */
export interface CreateUtilsBrandDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsBrandDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsBrandDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsBrandDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUtilsBrandDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsBrandDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsBrandDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsBrandDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsBrandDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreateUtilsCategoryDto
 */
export interface CreateUtilsCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsCategoryDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsCategoryDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUtilsCategoryDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsCategoryDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsCategoryDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsCategoryDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsCategoryDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreateUtilsDepartmentDto
 */
export interface CreateUtilsDepartmentDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsDepartmentDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsDepartmentDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsDepartmentDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUtilsDepartmentDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsDepartmentDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsDepartmentDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsDepartmentDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsDepartmentDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreateUtilsPrePoStatusDto
 */
export interface CreateUtilsPrePoStatusDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsPrePoStatusDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreateUtilsStageDto
 */
export interface CreateUtilsStageDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStageDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStageDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStageDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUtilsStageDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsStageDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStageDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsStageDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStageDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreateUtilsStatusDto
 */
export interface CreateUtilsStatusDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStatusDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStatusDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStatusDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUtilsStatusDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsStatusDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStatusDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsStatusDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsStatusDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface CreateUtilsUnitDto
 */
export interface CreateUtilsUnitDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsUnitDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsUnitDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsUnitDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUtilsUnitDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsUnitDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsUnitDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof CreateUtilsUnitDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUtilsUnitDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteBidderDto
 */
export interface DeleteBidderDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteBidderDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteBidderDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteBidderDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteBidderDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteBidderDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteBidderDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteItemDto
 */
export interface DeleteItemDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteItemDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteItemDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteItemDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteItemDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteItemDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeletePrItemDto
 */
export interface DeletePrItemDto {
    /**
     * 
     * @type {string}
     * @memberof DeletePrItemDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeletePrItemDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeletePrItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletePrItemDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeletePrItemDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletePrItemDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeletePurchaseRequestDto
 */
export interface DeletePurchaseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof DeletePurchaseRequestDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeletePurchaseRequestDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeletePurchaseRequestDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletePurchaseRequestDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeletePurchaseRequestDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeletePurchaseRequestDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteTransactionHistoryDto
 */
export interface DeleteTransactionHistoryDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteTransactionHistoryDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteTransactionHistoryDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteTransactionHistoryDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteTransactionHistoryDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteTransactionHistoryDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteTransactionHistoryDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilsBrandDto
 */
export interface DeleteUtilsBrandDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsBrandDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUtilsBrandDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsBrandDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsBrandDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsBrandDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsBrandDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilsCategoryDto
 */
export interface DeleteUtilsCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsCategoryDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUtilsCategoryDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsCategoryDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsCategoryDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsCategoryDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsCategoryDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilsDepartmentDto
 */
export interface DeleteUtilsDepartmentDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsDepartmentDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUtilsDepartmentDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsDepartmentDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsDepartmentDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsDepartmentDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsDepartmentDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilsPrePoStatusDto
 */
export interface DeleteUtilsPrePoStatusDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsPrePoStatusDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUtilsPrePoStatusDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsPrePoStatusDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsPrePoStatusDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsPrePoStatusDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsPrePoStatusDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilsStageDto
 */
export interface DeleteUtilsStageDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsStageDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUtilsStageDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsStageDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsStageDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsStageDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsStageDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilsStatusDto
 */
export interface DeleteUtilsStatusDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsStatusDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUtilsStatusDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsStatusDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsStatusDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsStatusDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsStatusDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilsUnitDto
 */
export interface DeleteUtilsUnitDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsUnitDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUtilsUnitDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsUnitDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsUnitDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof DeleteUtilsUnitDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteUtilsUnitDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface EditBidderDto
 */
export interface EditBidderDto {
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'street_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'subdivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'sitio'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'purok'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'barangay'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'municipality'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'tin'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditBidderDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditBidderDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditBidderDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditItemDto
 */
export interface EditItemDto {
    /**
     * 
     * @type {string}
     * @memberof EditItemDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditItemDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditItemDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditItemDto
     */
    'unit': string;
    /**
     * 
     * @type {string}
     * @memberof EditItemDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof EditItemDto
     */
    'brand': string;
    /**
     * 
     * @type {number}
     * @memberof EditItemDto
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof EditItemDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditItemDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditPersonDto
 */
export interface EditPersonDto {
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'suffix'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'civil_status': string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'street_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'subdivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'sitio'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'purok'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'barangay'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'municipality'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'phone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditPersonDto
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EditPersonDto
     */
    'is_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'activation_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'department': string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditPersonDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditPersonDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPersonDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditPrItemDto
 */
export interface EditPrItemDto {
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'purchase_request': string;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'item': string;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'unit': string;
    /**
     * 
     * @type {number}
     * @memberof EditPrItemDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'brand': string;
    /**
     * 
     * @type {number}
     * @memberof EditPrItemDto
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof EditPrItemDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditPrItemDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditPrItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'updated_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditPrItemDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPrItemDto
     */
    'deleted_by'?: string;
}
/**
 * 
 * @export
 * @interface EditPurchaseRequestDto
 */
export interface EditPurchaseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'pr_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'pr_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'sai_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'sai_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'alobs_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'alobs_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'section'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'status': string;
    /**
     * 
     * @type {boolean}
     * @memberof EditPurchaseRequestDto
     */
    'is_urgent': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EditPurchaseRequestDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPurchaseRequestDto
     */
    'updated_by'?: string;
    /**
     * 
     * @type {Array<EditPrItemDto>}
     * @memberof EditPurchaseRequestDto
     */
    'items'?: Array<EditPrItemDto>;
}
/**
 * 
 * @export
 * @interface EditUtilsBrandDto
 */
export interface EditUtilsBrandDto {
    /**
     * 
     * @type {string}
     * @memberof EditUtilsBrandDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsBrandDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsBrandDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditUtilsBrandDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditUtilsBrandDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsBrandDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditUtilsCategoryDto
 */
export interface EditUtilsCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof EditUtilsCategoryDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsCategoryDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditUtilsCategoryDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditUtilsCategoryDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsCategoryDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditUtilsDepartmentDto
 */
export interface EditUtilsDepartmentDto {
    /**
     * 
     * @type {string}
     * @memberof EditUtilsDepartmentDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsDepartmentDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsDepartmentDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditUtilsDepartmentDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditUtilsDepartmentDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsDepartmentDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditUtilsPrePoStatusDto
 */
export interface EditUtilsPrePoStatusDto {
    /**
     * 
     * @type {string}
     * @memberof EditUtilsPrePoStatusDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsPrePoStatusDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsPrePoStatusDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditUtilsPrePoStatusDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditUtilsPrePoStatusDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsPrePoStatusDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditUtilsStageDto
 */
export interface EditUtilsStageDto {
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStageDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStageDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStageDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditUtilsStageDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditUtilsStageDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStageDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditUtilsStatusDto
 */
export interface EditUtilsStatusDto {
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStatusDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStatusDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStatusDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditUtilsStatusDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditUtilsStatusDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsStatusDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface EditUtilsUnitDto
 */
export interface EditUtilsUnitDto {
    /**
     * 
     * @type {string}
     * @memberof EditUtilsUnitDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsUnitDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsUnitDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EditUtilsUnitDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof EditUtilsUnitDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUtilsUnitDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDto
 */
export interface ForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GetBidderDto
 */
export interface GetBidderDto {
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'street_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'subdivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'sitio'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'purok'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'barangay'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'municipality'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'tin'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetBidderDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetBidderDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBidderDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface GetItemDto
 */
export interface GetItemDto {
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'unit': string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'unit_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'category_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'brand': string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'brand_name': string;
    /**
     * 
     * @type {number}
     * @memberof GetItemDto
     */
    'price': number;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetItemDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetItemDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface GetPrItemDto
 */
export interface GetPrItemDto {
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'purchase_request': string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'item': string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'item_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'unit': string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'unit_name': string;
    /**
     * 
     * @type {number}
     * @memberof GetPrItemDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'brand': string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'brand_name': string;
    /**
     * 
     * @type {number}
     * @memberof GetPrItemDto
     */
    'price': number;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPrItemDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPrItemDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPrItemDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface GetPurchaseRequestDto
 */
export interface GetPurchaseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'pr_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'pr_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'sai_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'sai_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'alobs_no'?: string;
    /**
     * The date of the event. Format: YYYY-MM-DD
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'alobs_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'category_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'department_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'section'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'status_name': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetPurchaseRequestDto
     */
    'is_urgent': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetPurchaseRequestDto
     */
    'is_gso'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'gso_remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'gso_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'gso_by_first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'gso_by_last_name'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'gso_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetPurchaseRequestDto
     */
    'is_treasurer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'treasurer_remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'treasurer_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'treasurer_by_first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'treasurer_by_last_name'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'treasurer_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetPurchaseRequestDto
     */
    'is_mayor'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'mayor_remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'mayor_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'mayor_by_first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'mayor_by_last_name'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'mayor_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetPurchaseRequestDto
     */
    'is_budget'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'budget_remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'budget_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'budget_by_first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'budget_by_last_name'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'budget_at'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'created_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'create_by_first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'create_by_last_name'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'updated_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'update_by_first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'update_by_last_name'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPurchaseRequestDto
     */
    'deleted_by'?: string;
    /**
     * 
     * @type {Array<GetPrItemDto>}
     * @memberof GetPurchaseRequestDto
     */
    'items'?: Array<GetPrItemDto>;
}
/**
 * 
 * @export
 * @interface GetTransactionHistoryDto
 */
export interface GetTransactionHistoryDto {
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'request_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'request_source': string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'new_values'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'old_values'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionHistoryDto
     */
    'updated_by'?: string;
}
/**
 * 
 * @export
 * @interface ItemControllerGetDataAsList200Response
 */
export interface ItemControllerGetDataAsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ItemControllerGetDataAsList200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<GetItemDto>}
     * @memberof ItemControllerGetDataAsList200Response
     */
    'data'?: Array<GetItemDto>;
}
/**
 * 
 * @export
 * @interface ItemControllerGetDataAsList200ResponseAllOf
 */
export interface ItemControllerGetDataAsList200ResponseAllOf {
    /**
     * 
     * @type {Array<GetItemDto>}
     * @memberof ItemControllerGetDataAsList200ResponseAllOf
     */
    'data'?: Array<GetItemDto>;
}
/**
 * 
 * @export
 * @interface ListDataDto
 */
export interface ListDataDto {
    /**
     * 
     * @type {string}
     * @memberof ListDataDto
     */
    'value': string;
    /**
     * 
     * @type {Any}
     * @memberof ListDataDto
     */
    'label': any;
}
/**
 * 
 * @export
 * @interface LoginPersonDto
 */
export interface LoginPersonDto {
    /**
     * 
     * @type {string}
     * @memberof LoginPersonDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginPersonDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_code': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_first_name': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_last_name': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_suffix'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_position'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_gender': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_civil_status': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_street_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_subdivision'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_zone'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_sitio'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_purok'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_barangay'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_municipality'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_province'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_region'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_country'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_phone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseDto
     */
    'person_is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseDto
     */
    'person_is_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'person_avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'oauth_client_secret': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'oauth_client_scope'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'oauth_client_grant_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'oauth_token': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'oauth_refresh_token': string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof LoginResponseDto
     */
    'oauth_expiry': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'role_code': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'role_name': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'department_code': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'department_name': string;
}
/**
 * 
 * @export
 * @interface MessageResponseDto
 */
export interface MessageResponseDto {
    /**
     * 
     * @type {string}
     * @memberof MessageResponseDto
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof MessageResponseDto
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PrItemControllerGetDataAsList200Response
 */
export interface PrItemControllerGetDataAsList200Response {
    /**
     * 
     * @type {number}
     * @memberof PrItemControllerGetDataAsList200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<GetPrItemDto>}
     * @memberof PrItemControllerGetDataAsList200Response
     */
    'data'?: Array<GetPrItemDto>;
}
/**
 * 
 * @export
 * @interface PrItemControllerGetDataAsList200ResponseAllOf
 */
export interface PrItemControllerGetDataAsList200ResponseAllOf {
    /**
     * 
     * @type {Array<GetPrItemDto>}
     * @memberof PrItemControllerGetDataAsList200ResponseAllOf
     */
    'data'?: Array<GetPrItemDto>;
}
/**
 * 
 * @export
 * @interface ProcessPurchaseRequestDto
 */
export interface ProcessPurchaseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ProcessPurchaseRequestDto
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessPurchaseRequestDto
     */
    'is_gso'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessPurchaseRequestDto
     */
    'is_treasurer'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessPurchaseRequestDto
     */
    'is_mayor'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessPurchaseRequestDto
     */
    'is_budget'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessPurchaseRequestDto
     */
    'remarks'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseRequestControllerGetDataAsList200Response
 */
export interface PurchaseRequestControllerGetDataAsList200Response {
    /**
     * 
     * @type {number}
     * @memberof PurchaseRequestControllerGetDataAsList200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<GetPurchaseRequestDto>}
     * @memberof PurchaseRequestControllerGetDataAsList200Response
     */
    'data'?: Array<GetPurchaseRequestDto>;
}
/**
 * 
 * @export
 * @interface PurchaseRequestControllerGetDataAsList200ResponseAllOf
 */
export interface PurchaseRequestControllerGetDataAsList200ResponseAllOf {
    /**
     * 
     * @type {Array<GetPurchaseRequestDto>}
     * @memberof PurchaseRequestControllerGetDataAsList200ResponseAllOf
     */
    'data'?: Array<GetPurchaseRequestDto>;
}
/**
 * 
 * @export
 * @interface TransactionHistoryControllerGetDataAsList200Response
 */
export interface TransactionHistoryControllerGetDataAsList200Response {
    /**
     * 
     * @type {number}
     * @memberof TransactionHistoryControllerGetDataAsList200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<GetTransactionHistoryDto>}
     * @memberof TransactionHistoryControllerGetDataAsList200Response
     */
    'data'?: Array<GetTransactionHistoryDto>;
}
/**
 * 
 * @export
 * @interface TransactionHistoryControllerGetDataAsList200ResponseAllOf
 */
export interface TransactionHistoryControllerGetDataAsList200ResponseAllOf {
    /**
     * 
     * @type {Array<GetTransactionHistoryDto>}
     * @memberof TransactionHistoryControllerGetDataAsList200ResponseAllOf
     */
    'data'?: Array<GetTransactionHistoryDto>;
}
/**
 * 
 * @export
 * @interface UpdatePersonDto
 */
export interface UpdatePersonDto {
    /**
     * 
     * @type {EditPersonDto}
     * @memberof UpdatePersonDto
     */
    'person': EditPersonDto;
    /**
     * 
     * @type {any}
     * @memberof UpdatePersonDto
     */
    'file'?: any;
}
/**
 * 
 * @export
 * @interface UtilsBrandControllerGetDataAsList200Response
 */
export interface UtilsBrandControllerGetDataAsList200Response {
    /**
     * 
     * @type {number}
     * @memberof UtilsBrandControllerGetDataAsList200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<UtilsDataDto>}
     * @memberof UtilsBrandControllerGetDataAsList200Response
     */
    'data'?: Array<UtilsDataDto>;
}
/**
 * 
 * @export
 * @interface UtilsBrandControllerGetDataAsList200ResponseAllOf
 */
export interface UtilsBrandControllerGetDataAsList200ResponseAllOf {
    /**
     * 
     * @type {Array<UtilsDataDto>}
     * @memberof UtilsBrandControllerGetDataAsList200ResponseAllOf
     */
    'data'?: Array<UtilsDataDto>;
}
/**
 * 
 * @export
 * @interface UtilsDataDto
 */
export interface UtilsDataDto {
    /**
     * 
     * @type {string}
     * @memberof UtilsDataDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof UtilsDataDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UtilsDataDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UtilsDataDto
     */
    'is_active'?: boolean;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof UtilsDataDto
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UtilsDataDto
     */
    'created_by'?: string;
    /**
     * The date and time of the event. Format: YYYY-MM-DD HH:ii:ss
     * @type {string}
     * @memberof UtilsDataDto
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UtilsDataDto
     */
    'updated_by'?: string;
}

/**
 * BidderApi - axios parameter creator
 * @export
 */
export const BidderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBidderDto} createBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerCreate: async (createBidderDto: CreateBidderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBidderDto' is not null or undefined
            assertParamExists('bidderControllerCreate', 'createBidderDto', createBidderDto)
            const localVarPath = `/api/v1/bidder/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBidderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteBidderDto} deleteBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerDelete: async (deleteBidderDto: DeleteBidderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteBidderDto' is not null or undefined
            assertParamExists('bidderControllerDelete', 'deleteBidderDto', deleteBidderDto)
            const localVarPath = `/api/v1/bidder/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBidderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditBidderDto} editBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerEdit: async (editBidderDto: EditBidderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editBidderDto' is not null or undefined
            assertParamExists('bidderControllerEdit', 'editBidderDto', editBidderDto)
            const localVarPath = `/api/v1/bidder/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editBidderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bidder/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BidderApi - functional programming interface
 * @export
 */
export const BidderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BidderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBidderDto} createBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidderControllerCreate(createBidderDto: CreateBidderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidderControllerCreate(createBidderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteBidderDto} deleteBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidderControllerDelete(deleteBidderDto: DeleteBidderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidderControllerDelete(deleteBidderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditBidderDto} editBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidderControllerEdit(editBidderDto: EditBidderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidderControllerEdit(editBidderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidderControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidderControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidderControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BidderApi - factory interface
 * @export
 */
export const BidderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BidderApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateBidderDto} createBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerCreate(createBidderDto: CreateBidderDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.bidderControllerCreate(createBidderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteBidderDto} deleteBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerDelete(deleteBidderDto: DeleteBidderDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.bidderControllerDelete(deleteBidderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditBidderDto} editBidderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerEdit(editBidderDto: EditBidderDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.bidderControllerEdit(editBidderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidderControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<BidderControllerGetDataAsList200Response> {
            return localVarFp.bidderControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BidderApi - object-oriented interface
 * @export
 * @class BidderApi
 * @extends {BaseAPI}
 */
export class BidderApi extends BaseAPI {
    /**
     * 
     * @param {CreateBidderDto} createBidderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidderApi
     */
    public bidderControllerCreate(createBidderDto: CreateBidderDto, options?: AxiosRequestConfig) {
        return BidderApiFp(this.configuration).bidderControllerCreate(createBidderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteBidderDto} deleteBidderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidderApi
     */
    public bidderControllerDelete(deleteBidderDto: DeleteBidderDto, options?: AxiosRequestConfig) {
        return BidderApiFp(this.configuration).bidderControllerDelete(deleteBidderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditBidderDto} editBidderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidderApi
     */
    public bidderControllerEdit(editBidderDto: EditBidderDto, options?: AxiosRequestConfig) {
        return BidderApiFp(this.configuration).bidderControllerEdit(editBidderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidderApi
     */
    public bidderControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return BidderApiFp(this.configuration).bidderControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateItemDto} createItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerCreate: async (createItemDto: CreateItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createItemDto' is not null or undefined
            assertParamExists('itemControllerCreate', 'createItemDto', createItemDto)
            const localVarPath = `/api/v1/item/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteItemDto} deleteItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerDelete: async (deleteItemDto: DeleteItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteItemDto' is not null or undefined
            assertParamExists('itemControllerDelete', 'deleteItemDto', deleteItemDto)
            const localVarPath = `/api/v1/item/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditItemDto} editItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerEdit: async (editItemDto: EditItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editItemDto' is not null or undefined
            assertParamExists('itemControllerEdit', 'editItemDto', editItemDto)
            const localVarPath = `/api/v1/item/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/item/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateItemDto} createItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerCreate(createItemDto: CreateItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerCreate(createItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteItemDto} deleteItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerDelete(deleteItemDto: DeleteItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerDelete(deleteItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditItemDto} editItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerEdit(editItemDto: EditItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerEdit(editItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateItemDto} createItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerCreate(createItemDto: CreateItemDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.itemControllerCreate(createItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteItemDto} deleteItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerDelete(deleteItemDto: DeleteItemDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.itemControllerDelete(deleteItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditItemDto} editItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerEdit(editItemDto: EditItemDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.itemControllerEdit(editItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<ItemControllerGetDataAsList200Response> {
            return localVarFp.itemControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 
     * @param {CreateItemDto} createItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerCreate(createItemDto: CreateItemDto, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerCreate(createItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteItemDto} deleteItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerDelete(deleteItemDto: DeleteItemDto, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerDelete(deleteItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditItemDto} editItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerEdit(editItemDto: EditItemDto, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerEdit(editItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OauthApi - axios parameter creator
 * @export
 */
export const OauthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthControllerChangePassword: async (changePasswordDto: ChangePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordDto' is not null or undefined
            assertParamExists('oauthControllerChangePassword', 'changePasswordDto', changePasswordDto)
            const localVarPath = `/api/v1/oauth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthControllerForgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('oauthControllerForgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/api/v1/oauth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginPersonDto} loginPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthControllerLogin: async (loginPersonDto: LoginPersonDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginPersonDto' is not null or undefined
            assertParamExists('oauthControllerLogin', 'loginPersonDto', loginPersonDto)
            const localVarPath = `/api/v1/oauth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginPersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OauthApi - functional programming interface
 * @export
 */
export const OauthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OauthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthControllerChangePassword(changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthControllerChangePassword(changePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthControllerForgotPassword(forgotPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginPersonDto} loginPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthControllerLogin(loginPersonDto: LoginPersonDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthControllerLogin(loginPersonDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OauthApi - factory interface
 * @export
 */
export const OauthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OauthApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthControllerChangePassword(changePasswordDto: ChangePasswordDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.oauthControllerChangePassword(changePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.oauthControllerForgotPassword(forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginPersonDto} loginPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthControllerLogin(loginPersonDto: LoginPersonDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.oauthControllerLogin(loginPersonDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OauthApi - object-oriented interface
 * @export
 * @class OauthApi
 * @extends {BaseAPI}
 */
export class OauthApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordDto} changePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public oauthControllerChangePassword(changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig) {
        return OauthApiFp(this.configuration).oauthControllerChangePassword(changePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordDto} forgotPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public oauthControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: AxiosRequestConfig) {
        return OauthApiFp(this.configuration).oauthControllerForgotPassword(forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginPersonDto} loginPersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public oauthControllerLogin(loginPersonDto: LoginPersonDto, options?: AxiosRequestConfig) {
        return OauthApiFp(this.configuration).oauthControllerLogin(loginPersonDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ActivatePersonDto} activatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personControllerActivateAccount: async (activatePersonDto: ActivatePersonDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activatePersonDto' is not null or undefined
            assertParamExists('personControllerActivateAccount', 'activatePersonDto', activatePersonDto)
            const localVarPath = `/api/v1/person/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activatePersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddPersonDto} addPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personControllerAddPerson: async (addPersonDto: AddPersonDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addPersonDto' is not null or undefined
            assertParamExists('personControllerAddPerson', 'addPersonDto', addPersonDto)
            const localVarPath = `/api/v1/person/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personControllerUpdatePerson: async (updatePersonDto: UpdatePersonDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePersonDto' is not null or undefined
            assertParamExists('personControllerUpdatePerson', 'updatePersonDto', updatePersonDto)
            const localVarPath = `/api/v1/person/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ActivatePersonDto} activatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personControllerActivateAccount(activatePersonDto: ActivatePersonDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personControllerActivateAccount(activatePersonDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddPersonDto} addPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personControllerAddPerson(addPersonDto: AddPersonDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personControllerAddPerson(addPersonDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personControllerUpdatePerson(updatePersonDto: UpdatePersonDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personControllerUpdatePerson(updatePersonDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonApiFp(configuration)
    return {
        /**
         * 
         * @param {ActivatePersonDto} activatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personControllerActivateAccount(activatePersonDto: ActivatePersonDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.personControllerActivateAccount(activatePersonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddPersonDto} addPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personControllerAddPerson(addPersonDto: AddPersonDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.personControllerAddPerson(addPersonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personControllerUpdatePerson(updatePersonDto: UpdatePersonDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.personControllerUpdatePerson(updatePersonDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export class PersonApi extends BaseAPI {
    /**
     * 
     * @param {ActivatePersonDto} activatePersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public personControllerActivateAccount(activatePersonDto: ActivatePersonDto, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).personControllerActivateAccount(activatePersonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddPersonDto} addPersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public personControllerAddPerson(addPersonDto: AddPersonDto, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).personControllerAddPerson(addPersonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePersonDto} updatePersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public personControllerUpdatePerson(updatePersonDto: UpdatePersonDto, options?: AxiosRequestConfig) {
        return PersonApiFp(this.configuration).personControllerUpdatePerson(updatePersonDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PurchaseRequestApi - axios parameter creator
 * @export
 */
export const PurchaseRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePurchaseRequestDto} createPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerCreate: async (createPurchaseRequestDto: CreatePurchaseRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPurchaseRequestDto' is not null or undefined
            assertParamExists('purchaseRequestControllerCreate', 'createPurchaseRequestDto', createPurchaseRequestDto)
            const localVarPath = `/api/v1/purchase-request/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPurchaseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeletePurchaseRequestDto} deletePurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerDelete: async (deletePurchaseRequestDto: DeletePurchaseRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deletePurchaseRequestDto' is not null or undefined
            assertParamExists('purchaseRequestControllerDelete', 'deletePurchaseRequestDto', deletePurchaseRequestDto)
            const localVarPath = `/api/v1/purchase-request/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deletePurchaseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditPurchaseRequestDto} editPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerEdit: async (editPurchaseRequestDto: EditPurchaseRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editPurchaseRequestDto' is not null or undefined
            assertParamExists('purchaseRequestControllerEdit', 'editPurchaseRequestDto', editPurchaseRequestDto)
            const localVarPath = `/api/v1/purchase-request/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editPurchaseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/purchase-request/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProcessPurchaseRequestDto} processPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerProcess: async (processPurchaseRequestDto: ProcessPurchaseRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processPurchaseRequestDto' is not null or undefined
            assertParamExists('purchaseRequestControllerProcess', 'processPurchaseRequestDto', processPurchaseRequestDto)
            const localVarPath = `/api/v1/purchase-request/process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processPurchaseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseRequestApi - functional programming interface
 * @export
 */
export const PurchaseRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePurchaseRequestDto} createPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseRequestControllerCreate(createPurchaseRequestDto: CreatePurchaseRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseRequestControllerCreate(createPurchaseRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeletePurchaseRequestDto} deletePurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseRequestControllerDelete(deletePurchaseRequestDto: DeletePurchaseRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseRequestControllerDelete(deletePurchaseRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditPurchaseRequestDto} editPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseRequestControllerEdit(editPurchaseRequestDto: EditPurchaseRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseRequestControllerEdit(editPurchaseRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseRequestControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseRequestControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseRequestControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProcessPurchaseRequestDto} processPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseRequestControllerProcess(processPurchaseRequestDto: ProcessPurchaseRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseRequestControllerProcess(processPurchaseRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PurchaseRequestApi - factory interface
 * @export
 */
export const PurchaseRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePurchaseRequestDto} createPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerCreate(createPurchaseRequestDto: CreatePurchaseRequestDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.purchaseRequestControllerCreate(createPurchaseRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeletePurchaseRequestDto} deletePurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerDelete(deletePurchaseRequestDto: DeletePurchaseRequestDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.purchaseRequestControllerDelete(deletePurchaseRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditPurchaseRequestDto} editPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerEdit(editPurchaseRequestDto: EditPurchaseRequestDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.purchaseRequestControllerEdit(editPurchaseRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<PurchaseRequestControllerGetDataAsList200Response> {
            return localVarFp.purchaseRequestControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProcessPurchaseRequestDto} processPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseRequestControllerProcess(processPurchaseRequestDto: ProcessPurchaseRequestDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.purchaseRequestControllerProcess(processPurchaseRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseRequestApi - object-oriented interface
 * @export
 * @class PurchaseRequestApi
 * @extends {BaseAPI}
 */
export class PurchaseRequestApi extends BaseAPI {
    /**
     * 
     * @param {CreatePurchaseRequestDto} createPurchaseRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestApi
     */
    public purchaseRequestControllerCreate(createPurchaseRequestDto: CreatePurchaseRequestDto, options?: AxiosRequestConfig) {
        return PurchaseRequestApiFp(this.configuration).purchaseRequestControllerCreate(createPurchaseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeletePurchaseRequestDto} deletePurchaseRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestApi
     */
    public purchaseRequestControllerDelete(deletePurchaseRequestDto: DeletePurchaseRequestDto, options?: AxiosRequestConfig) {
        return PurchaseRequestApiFp(this.configuration).purchaseRequestControllerDelete(deletePurchaseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditPurchaseRequestDto} editPurchaseRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestApi
     */
    public purchaseRequestControllerEdit(editPurchaseRequestDto: EditPurchaseRequestDto, options?: AxiosRequestConfig) {
        return PurchaseRequestApiFp(this.configuration).purchaseRequestControllerEdit(editPurchaseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestApi
     */
    public purchaseRequestControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return PurchaseRequestApiFp(this.configuration).purchaseRequestControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProcessPurchaseRequestDto} processPurchaseRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestApi
     */
    public purchaseRequestControllerProcess(processPurchaseRequestDto: ProcessPurchaseRequestDto, options?: AxiosRequestConfig) {
        return PurchaseRequestApiFp(this.configuration).purchaseRequestControllerProcess(processPurchaseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PurchaseRequestItemApi - axios parameter creator
 * @export
 */
export const PurchaseRequestItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePrItemDto} createPrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerCreate: async (createPrItemDto: CreatePrItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPrItemDto' is not null or undefined
            assertParamExists('prItemControllerCreate', 'createPrItemDto', createPrItemDto)
            const localVarPath = `/api/v1/pr-item/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPrItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeletePrItemDto} deletePrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerDelete: async (deletePrItemDto: DeletePrItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deletePrItemDto' is not null or undefined
            assertParamExists('prItemControllerDelete', 'deletePrItemDto', deletePrItemDto)
            const localVarPath = `/api/v1/pr-item/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deletePrItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditPrItemDto} editPrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerEdit: async (editPrItemDto: EditPrItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editPrItemDto' is not null or undefined
            assertParamExists('prItemControllerEdit', 'editPrItemDto', editPrItemDto)
            const localVarPath = `/api/v1/pr-item/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editPrItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pr-item/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseRequestItemApi - functional programming interface
 * @export
 */
export const PurchaseRequestItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseRequestItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePrItemDto} createPrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prItemControllerCreate(createPrItemDto: CreatePrItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prItemControllerCreate(createPrItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeletePrItemDto} deletePrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prItemControllerDelete(deletePrItemDto: DeletePrItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prItemControllerDelete(deletePrItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditPrItemDto} editPrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prItemControllerEdit(editPrItemDto: EditPrItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prItemControllerEdit(editPrItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prItemControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrItemControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prItemControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PurchaseRequestItemApi - factory interface
 * @export
 */
export const PurchaseRequestItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseRequestItemApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePrItemDto} createPrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerCreate(createPrItemDto: CreatePrItemDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.prItemControllerCreate(createPrItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeletePrItemDto} deletePrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerDelete(deletePrItemDto: DeletePrItemDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.prItemControllerDelete(deletePrItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditPrItemDto} editPrItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerEdit(editPrItemDto: EditPrItemDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.prItemControllerEdit(editPrItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prItemControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<PrItemControllerGetDataAsList200Response> {
            return localVarFp.prItemControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseRequestItemApi - object-oriented interface
 * @export
 * @class PurchaseRequestItemApi
 * @extends {BaseAPI}
 */
export class PurchaseRequestItemApi extends BaseAPI {
    /**
     * 
     * @param {CreatePrItemDto} createPrItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestItemApi
     */
    public prItemControllerCreate(createPrItemDto: CreatePrItemDto, options?: AxiosRequestConfig) {
        return PurchaseRequestItemApiFp(this.configuration).prItemControllerCreate(createPrItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeletePrItemDto} deletePrItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestItemApi
     */
    public prItemControllerDelete(deletePrItemDto: DeletePrItemDto, options?: AxiosRequestConfig) {
        return PurchaseRequestItemApiFp(this.configuration).prItemControllerDelete(deletePrItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditPrItemDto} editPrItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestItemApi
     */
    public prItemControllerEdit(editPrItemDto: EditPrItemDto, options?: AxiosRequestConfig) {
        return PurchaseRequestItemApiFp(this.configuration).prItemControllerEdit(editPrItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRequestItemApi
     */
    public prItemControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return PurchaseRequestItemApiFp(this.configuration).prItemControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionHistoryApi - axios parameter creator
 * @export
 */
export const TransactionHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteTransactionHistoryDto} deleteTransactionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionHistoryControllerDelete: async (deleteTransactionHistoryDto: DeleteTransactionHistoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteTransactionHistoryDto' is not null or undefined
            assertParamExists('transactionHistoryControllerDelete', 'deleteTransactionHistoryDto', deleteTransactionHistoryDto)
            const localVarPath = `/api/v1/transaction-history/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTransactionHistoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionHistoryControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transaction-history/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionHistoryApi - functional programming interface
 * @export
 */
export const TransactionHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteTransactionHistoryDto} deleteTransactionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionHistoryControllerDelete(deleteTransactionHistoryDto: DeleteTransactionHistoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionHistoryControllerDelete(deleteTransactionHistoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionHistoryControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionHistoryControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionHistoryControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionHistoryApi - factory interface
 * @export
 */
export const TransactionHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteTransactionHistoryDto} deleteTransactionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionHistoryControllerDelete(deleteTransactionHistoryDto: DeleteTransactionHistoryDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.transactionHistoryControllerDelete(deleteTransactionHistoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionHistoryControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<TransactionHistoryControllerGetDataAsList200Response> {
            return localVarFp.transactionHistoryControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionHistoryApi - object-oriented interface
 * @export
 * @class TransactionHistoryApi
 * @extends {BaseAPI}
 */
export class TransactionHistoryApi extends BaseAPI {
    /**
     * 
     * @param {DeleteTransactionHistoryDto} deleteTransactionHistoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionHistoryApi
     */
    public transactionHistoryControllerDelete(deleteTransactionHistoryDto: DeleteTransactionHistoryDto, options?: AxiosRequestConfig) {
        return TransactionHistoryApiFp(this.configuration).transactionHistoryControllerDelete(deleteTransactionHistoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionHistoryApi
     */
    public transactionHistoryControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return TransactionHistoryApiFp(this.configuration).transactionHistoryControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilitiesApi - axios parameter creator
 * @export
 */
export const UtilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} region 
         * @param {string} province 
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerBarangay: async (region: string, province: string, city: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('utilitiesControllerBarangay', 'region', region)
            // verify required parameter 'province' is not null or undefined
            assertParamExists('utilitiesControllerBarangay', 'province', province)
            // verify required parameter 'city' is not null or undefined
            assertParamExists('utilitiesControllerBarangay', 'city', city)
            const localVarPath = `/api/v1/utilities/barangay/{region}/{province}/{city}`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)))
                .replace(`{${"province"}}`, encodeURIComponent(String(province)))
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} region 
         * @param {string} province 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerCities: async (region: string, province: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('utilitiesControllerCities', 'region', region)
            // verify required parameter 'province' is not null or undefined
            assertParamExists('utilitiesControllerCities', 'province', province)
            const localVarPath = `/api/v1/utilities/cities/{region}/{province}`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)))
                .replace(`{${"province"}}`, encodeURIComponent(String(province)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerCivilStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utilities/civil-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGender: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utilities/gender`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGetUtilsRoleDataAsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utilities/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerHouseholdRole: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utilities/household-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerProvinces: async (region: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('utilitiesControllerProvinces', 'region', region)
            const localVarPath = `/api/v1/utilities/provinces/{region}`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerPulseCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utilities/pulse-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerPuroks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utilities/puroks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerRegions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utilities/regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilitiesApi - functional programming interface
 * @export
 */
export const UtilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} region 
         * @param {string} province 
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerBarangay(region: string, province: string, city: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerBarangay(region, province, city, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} region 
         * @param {string} province 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerCities(region: string, province: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerCities(region, province, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerCivilStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerCivilStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerGender(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerGender(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerGetUtilsRoleDataAsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerGetUtilsRoleDataAsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerHouseholdRole(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerHouseholdRole(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerProvinces(region: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerProvinces(region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerPulseCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerPulseCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerPuroks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerPuroks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerRegions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerRegions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilitiesApi - factory interface
 * @export
 */
export const UtilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} region 
         * @param {string} province 
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerBarangay(region: string, province: string, city: string, options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerBarangay(region, province, city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} region 
         * @param {string} province 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerCities(region: string, province: string, options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerCities(region, province, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerCivilStatus(options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerCivilStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGender(options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerGender(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGetUtilsRoleDataAsList(options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilitiesControllerGetUtilsRoleDataAsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerHouseholdRole(options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerHouseholdRole(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerProvinces(region: string, options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerProvinces(region, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerPulseCheck(options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerPulseCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerPuroks(options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerPuroks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerRegions(options?: any): AxiosPromise<ListDataDto> {
            return localVarFp.utilitiesControllerRegions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilitiesApi - object-oriented interface
 * @export
 * @class UtilitiesApi
 * @extends {BaseAPI}
 */
export class UtilitiesApi extends BaseAPI {
    /**
     * 
     * @param {string} region 
     * @param {string} province 
     * @param {string} city 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerBarangay(region: string, province: string, city: string, options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerBarangay(region, province, city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} region 
     * @param {string} province 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerCities(region: string, province: string, options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerCities(region, province, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerCivilStatus(options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerCivilStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerGender(options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerGender(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerGetUtilsRoleDataAsList(options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerGetUtilsRoleDataAsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerHouseholdRole(options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerHouseholdRole(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerProvinces(region: string, options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerProvinces(region, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerPulseCheck(options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerPulseCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerPuroks(options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerPuroks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerRegions(options?: AxiosRequestConfig) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerRegions(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsBrandApi - axios parameter creator
 * @export
 */
export const UtilsBrandApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUtilsBrandDto} createUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerCreate: async (createUtilsBrandDto: CreateUtilsBrandDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUtilsBrandDto' is not null or undefined
            assertParamExists('utilsBrandControllerCreate', 'createUtilsBrandDto', createUtilsBrandDto)
            const localVarPath = `/api/v1/utils-brand/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUtilsBrandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilsBrandDto} deleteUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerDelete: async (deleteUtilsBrandDto: DeleteUtilsBrandDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilsBrandDto' is not null or undefined
            assertParamExists('utilsBrandControllerDelete', 'deleteUtilsBrandDto', deleteUtilsBrandDto)
            const localVarPath = `/api/v1/utils-brand/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilsBrandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUtilsBrandDto} editUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerEdit: async (editUtilsBrandDto: EditUtilsBrandDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUtilsBrandDto' is not null or undefined
            assertParamExists('utilsBrandControllerEdit', 'editUtilsBrandDto', editUtilsBrandDto)
            const localVarPath = `/api/v1/utils-brand/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUtilsBrandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils-brand/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsBrandApi - functional programming interface
 * @export
 */
export const UtilsBrandApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsBrandApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsBrandDto} createUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsBrandControllerCreate(createUtilsBrandDto: CreateUtilsBrandDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsBrandControllerCreate(createUtilsBrandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilsBrandDto} deleteUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsBrandControllerDelete(deleteUtilsBrandDto: DeleteUtilsBrandDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsBrandControllerDelete(deleteUtilsBrandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditUtilsBrandDto} editUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsBrandControllerEdit(editUtilsBrandDto: EditUtilsBrandDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsBrandControllerEdit(editUtilsBrandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsBrandControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsBrandControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsBrandApi - factory interface
 * @export
 */
export const UtilsBrandApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsBrandApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsBrandDto} createUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerCreate(createUtilsBrandDto: CreateUtilsBrandDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsBrandControllerCreate(createUtilsBrandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilsBrandDto} deleteUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerDelete(deleteUtilsBrandDto: DeleteUtilsBrandDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsBrandControllerDelete(deleteUtilsBrandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUtilsBrandDto} editUtilsBrandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerEdit(editUtilsBrandDto: EditUtilsBrandDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsBrandControllerEdit(editUtilsBrandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsBrandControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilsBrandControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsBrandApi - object-oriented interface
 * @export
 * @class UtilsBrandApi
 * @extends {BaseAPI}
 */
export class UtilsBrandApi extends BaseAPI {
    /**
     * 
     * @param {CreateUtilsBrandDto} createUtilsBrandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsBrandApi
     */
    public utilsBrandControllerCreate(createUtilsBrandDto: CreateUtilsBrandDto, options?: AxiosRequestConfig) {
        return UtilsBrandApiFp(this.configuration).utilsBrandControllerCreate(createUtilsBrandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUtilsBrandDto} deleteUtilsBrandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsBrandApi
     */
    public utilsBrandControllerDelete(deleteUtilsBrandDto: DeleteUtilsBrandDto, options?: AxiosRequestConfig) {
        return UtilsBrandApiFp(this.configuration).utilsBrandControllerDelete(deleteUtilsBrandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUtilsBrandDto} editUtilsBrandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsBrandApi
     */
    public utilsBrandControllerEdit(editUtilsBrandDto: EditUtilsBrandDto, options?: AxiosRequestConfig) {
        return UtilsBrandApiFp(this.configuration).utilsBrandControllerEdit(editUtilsBrandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsBrandApi
     */
    public utilsBrandControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return UtilsBrandApiFp(this.configuration).utilsBrandControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsCateogryApi - axios parameter creator
 * @export
 */
export const UtilsCateogryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUtilsCategoryDto} createUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerCreate: async (createUtilsCategoryDto: CreateUtilsCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUtilsCategoryDto' is not null or undefined
            assertParamExists('utilsCategoryControllerCreate', 'createUtilsCategoryDto', createUtilsCategoryDto)
            const localVarPath = `/api/v1/utils-cateogry/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUtilsCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilsCategoryDto} deleteUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerDelete: async (deleteUtilsCategoryDto: DeleteUtilsCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilsCategoryDto' is not null or undefined
            assertParamExists('utilsCategoryControllerDelete', 'deleteUtilsCategoryDto', deleteUtilsCategoryDto)
            const localVarPath = `/api/v1/utils-cateogry/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilsCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUtilsCategoryDto} editUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerEdit: async (editUtilsCategoryDto: EditUtilsCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUtilsCategoryDto' is not null or undefined
            assertParamExists('utilsCategoryControllerEdit', 'editUtilsCategoryDto', editUtilsCategoryDto)
            const localVarPath = `/api/v1/utils-cateogry/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUtilsCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils-cateogry/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsCateogryApi - functional programming interface
 * @export
 */
export const UtilsCateogryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsCateogryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsCategoryDto} createUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsCategoryControllerCreate(createUtilsCategoryDto: CreateUtilsCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsCategoryControllerCreate(createUtilsCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilsCategoryDto} deleteUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsCategoryControllerDelete(deleteUtilsCategoryDto: DeleteUtilsCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsCategoryControllerDelete(deleteUtilsCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditUtilsCategoryDto} editUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsCategoryControllerEdit(editUtilsCategoryDto: EditUtilsCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsCategoryControllerEdit(editUtilsCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsCategoryControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsCategoryControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsCateogryApi - factory interface
 * @export
 */
export const UtilsCateogryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsCateogryApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsCategoryDto} createUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerCreate(createUtilsCategoryDto: CreateUtilsCategoryDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsCategoryControllerCreate(createUtilsCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilsCategoryDto} deleteUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerDelete(deleteUtilsCategoryDto: DeleteUtilsCategoryDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsCategoryControllerDelete(deleteUtilsCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUtilsCategoryDto} editUtilsCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerEdit(editUtilsCategoryDto: EditUtilsCategoryDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsCategoryControllerEdit(editUtilsCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsCategoryControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilsCategoryControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsCateogryApi - object-oriented interface
 * @export
 * @class UtilsCateogryApi
 * @extends {BaseAPI}
 */
export class UtilsCateogryApi extends BaseAPI {
    /**
     * 
     * @param {CreateUtilsCategoryDto} createUtilsCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsCateogryApi
     */
    public utilsCategoryControllerCreate(createUtilsCategoryDto: CreateUtilsCategoryDto, options?: AxiosRequestConfig) {
        return UtilsCateogryApiFp(this.configuration).utilsCategoryControllerCreate(createUtilsCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUtilsCategoryDto} deleteUtilsCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsCateogryApi
     */
    public utilsCategoryControllerDelete(deleteUtilsCategoryDto: DeleteUtilsCategoryDto, options?: AxiosRequestConfig) {
        return UtilsCateogryApiFp(this.configuration).utilsCategoryControllerDelete(deleteUtilsCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUtilsCategoryDto} editUtilsCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsCateogryApi
     */
    public utilsCategoryControllerEdit(editUtilsCategoryDto: EditUtilsCategoryDto, options?: AxiosRequestConfig) {
        return UtilsCateogryApiFp(this.configuration).utilsCategoryControllerEdit(editUtilsCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsCateogryApi
     */
    public utilsCategoryControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return UtilsCateogryApiFp(this.configuration).utilsCategoryControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsDepartmentApi - axios parameter creator
 * @export
 */
export const UtilsDepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUtilsDepartmentDto} createUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerCreate: async (createUtilsDepartmentDto: CreateUtilsDepartmentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUtilsDepartmentDto' is not null or undefined
            assertParamExists('utilsDepartmentControllerCreate', 'createUtilsDepartmentDto', createUtilsDepartmentDto)
            const localVarPath = `/api/v1/utils-department/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUtilsDepartmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilsDepartmentDto} deleteUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerDelete: async (deleteUtilsDepartmentDto: DeleteUtilsDepartmentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilsDepartmentDto' is not null or undefined
            assertParamExists('utilsDepartmentControllerDelete', 'deleteUtilsDepartmentDto', deleteUtilsDepartmentDto)
            const localVarPath = `/api/v1/utils-department/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilsDepartmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUtilsDepartmentDto} editUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerEdit: async (editUtilsDepartmentDto: EditUtilsDepartmentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUtilsDepartmentDto' is not null or undefined
            assertParamExists('utilsDepartmentControllerEdit', 'editUtilsDepartmentDto', editUtilsDepartmentDto)
            const localVarPath = `/api/v1/utils-department/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUtilsDepartmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils-department/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsDepartmentApi - functional programming interface
 * @export
 */
export const UtilsDepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsDepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsDepartmentDto} createUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsDepartmentControllerCreate(createUtilsDepartmentDto: CreateUtilsDepartmentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsDepartmentControllerCreate(createUtilsDepartmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilsDepartmentDto} deleteUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsDepartmentControllerDelete(deleteUtilsDepartmentDto: DeleteUtilsDepartmentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsDepartmentControllerDelete(deleteUtilsDepartmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditUtilsDepartmentDto} editUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsDepartmentControllerEdit(editUtilsDepartmentDto: EditUtilsDepartmentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsDepartmentControllerEdit(editUtilsDepartmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsDepartmentControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsDepartmentControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsDepartmentApi - factory interface
 * @export
 */
export const UtilsDepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsDepartmentApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsDepartmentDto} createUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerCreate(createUtilsDepartmentDto: CreateUtilsDepartmentDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsDepartmentControllerCreate(createUtilsDepartmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilsDepartmentDto} deleteUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerDelete(deleteUtilsDepartmentDto: DeleteUtilsDepartmentDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsDepartmentControllerDelete(deleteUtilsDepartmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUtilsDepartmentDto} editUtilsDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerEdit(editUtilsDepartmentDto: EditUtilsDepartmentDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsDepartmentControllerEdit(editUtilsDepartmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsDepartmentControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilsDepartmentControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsDepartmentApi - object-oriented interface
 * @export
 * @class UtilsDepartmentApi
 * @extends {BaseAPI}
 */
export class UtilsDepartmentApi extends BaseAPI {
    /**
     * 
     * @param {CreateUtilsDepartmentDto} createUtilsDepartmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsDepartmentApi
     */
    public utilsDepartmentControllerCreate(createUtilsDepartmentDto: CreateUtilsDepartmentDto, options?: AxiosRequestConfig) {
        return UtilsDepartmentApiFp(this.configuration).utilsDepartmentControllerCreate(createUtilsDepartmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUtilsDepartmentDto} deleteUtilsDepartmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsDepartmentApi
     */
    public utilsDepartmentControllerDelete(deleteUtilsDepartmentDto: DeleteUtilsDepartmentDto, options?: AxiosRequestConfig) {
        return UtilsDepartmentApiFp(this.configuration).utilsDepartmentControllerDelete(deleteUtilsDepartmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUtilsDepartmentDto} editUtilsDepartmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsDepartmentApi
     */
    public utilsDepartmentControllerEdit(editUtilsDepartmentDto: EditUtilsDepartmentDto, options?: AxiosRequestConfig) {
        return UtilsDepartmentApiFp(this.configuration).utilsDepartmentControllerEdit(editUtilsDepartmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsDepartmentApi
     */
    public utilsDepartmentControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return UtilsDepartmentApiFp(this.configuration).utilsDepartmentControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsPrePOStatusApi - axios parameter creator
 * @export
 */
export const UtilsPrePOStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUtilsPrePoStatusDto} createUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerCreate: async (createUtilsPrePoStatusDto: CreateUtilsPrePoStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUtilsPrePoStatusDto' is not null or undefined
            assertParamExists('utilsPrePoStatusControllerCreate', 'createUtilsPrePoStatusDto', createUtilsPrePoStatusDto)
            const localVarPath = `/api/v1/utils-pre-po-status/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUtilsPrePoStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilsPrePoStatusDto} deleteUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerDelete: async (deleteUtilsPrePoStatusDto: DeleteUtilsPrePoStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilsPrePoStatusDto' is not null or undefined
            assertParamExists('utilsPrePoStatusControllerDelete', 'deleteUtilsPrePoStatusDto', deleteUtilsPrePoStatusDto)
            const localVarPath = `/api/v1/utils-pre-po-status/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilsPrePoStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUtilsPrePoStatusDto} editUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerEdit: async (editUtilsPrePoStatusDto: EditUtilsPrePoStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUtilsPrePoStatusDto' is not null or undefined
            assertParamExists('utilsPrePoStatusControllerEdit', 'editUtilsPrePoStatusDto', editUtilsPrePoStatusDto)
            const localVarPath = `/api/v1/utils-pre-po-status/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUtilsPrePoStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils-pre-po-status/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsPrePOStatusApi - functional programming interface
 * @export
 */
export const UtilsPrePOStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsPrePOStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsPrePoStatusDto} createUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsPrePoStatusControllerCreate(createUtilsPrePoStatusDto: CreateUtilsPrePoStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsPrePoStatusControllerCreate(createUtilsPrePoStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilsPrePoStatusDto} deleteUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsPrePoStatusControllerDelete(deleteUtilsPrePoStatusDto: DeleteUtilsPrePoStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsPrePoStatusControllerDelete(deleteUtilsPrePoStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditUtilsPrePoStatusDto} editUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsPrePoStatusControllerEdit(editUtilsPrePoStatusDto: EditUtilsPrePoStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsPrePoStatusControllerEdit(editUtilsPrePoStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsPrePoStatusControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsPrePoStatusControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsPrePOStatusApi - factory interface
 * @export
 */
export const UtilsPrePOStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsPrePOStatusApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsPrePoStatusDto} createUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerCreate(createUtilsPrePoStatusDto: CreateUtilsPrePoStatusDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsPrePoStatusControllerCreate(createUtilsPrePoStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilsPrePoStatusDto} deleteUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerDelete(deleteUtilsPrePoStatusDto: DeleteUtilsPrePoStatusDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsPrePoStatusControllerDelete(deleteUtilsPrePoStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUtilsPrePoStatusDto} editUtilsPrePoStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerEdit(editUtilsPrePoStatusDto: EditUtilsPrePoStatusDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsPrePoStatusControllerEdit(editUtilsPrePoStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsPrePoStatusControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilsPrePoStatusControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsPrePOStatusApi - object-oriented interface
 * @export
 * @class UtilsPrePOStatusApi
 * @extends {BaseAPI}
 */
export class UtilsPrePOStatusApi extends BaseAPI {
    /**
     * 
     * @param {CreateUtilsPrePoStatusDto} createUtilsPrePoStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsPrePOStatusApi
     */
    public utilsPrePoStatusControllerCreate(createUtilsPrePoStatusDto: CreateUtilsPrePoStatusDto, options?: AxiosRequestConfig) {
        return UtilsPrePOStatusApiFp(this.configuration).utilsPrePoStatusControllerCreate(createUtilsPrePoStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUtilsPrePoStatusDto} deleteUtilsPrePoStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsPrePOStatusApi
     */
    public utilsPrePoStatusControllerDelete(deleteUtilsPrePoStatusDto: DeleteUtilsPrePoStatusDto, options?: AxiosRequestConfig) {
        return UtilsPrePOStatusApiFp(this.configuration).utilsPrePoStatusControllerDelete(deleteUtilsPrePoStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUtilsPrePoStatusDto} editUtilsPrePoStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsPrePOStatusApi
     */
    public utilsPrePoStatusControllerEdit(editUtilsPrePoStatusDto: EditUtilsPrePoStatusDto, options?: AxiosRequestConfig) {
        return UtilsPrePOStatusApiFp(this.configuration).utilsPrePoStatusControllerEdit(editUtilsPrePoStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsPrePOStatusApi
     */
    public utilsPrePoStatusControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return UtilsPrePOStatusApiFp(this.configuration).utilsPrePoStatusControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsStageApi - axios parameter creator
 * @export
 */
export const UtilsStageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUtilsStageDto} createUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerCreate: async (createUtilsStageDto: CreateUtilsStageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUtilsStageDto' is not null or undefined
            assertParamExists('utilsStageControllerCreate', 'createUtilsStageDto', createUtilsStageDto)
            const localVarPath = `/api/v1/utils-stage/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUtilsStageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilsStageDto} deleteUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerDelete: async (deleteUtilsStageDto: DeleteUtilsStageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilsStageDto' is not null or undefined
            assertParamExists('utilsStageControllerDelete', 'deleteUtilsStageDto', deleteUtilsStageDto)
            const localVarPath = `/api/v1/utils-stage/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilsStageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUtilsStageDto} editUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerEdit: async (editUtilsStageDto: EditUtilsStageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUtilsStageDto' is not null or undefined
            assertParamExists('utilsStageControllerEdit', 'editUtilsStageDto', editUtilsStageDto)
            const localVarPath = `/api/v1/utils-stage/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUtilsStageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils-stage/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsStageApi - functional programming interface
 * @export
 */
export const UtilsStageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsStageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsStageDto} createUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStageControllerCreate(createUtilsStageDto: CreateUtilsStageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStageControllerCreate(createUtilsStageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilsStageDto} deleteUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStageControllerDelete(deleteUtilsStageDto: DeleteUtilsStageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStageControllerDelete(deleteUtilsStageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditUtilsStageDto} editUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStageControllerEdit(editUtilsStageDto: EditUtilsStageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStageControllerEdit(editUtilsStageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStageControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStageControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsStageApi - factory interface
 * @export
 */
export const UtilsStageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsStageApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsStageDto} createUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerCreate(createUtilsStageDto: CreateUtilsStageDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsStageControllerCreate(createUtilsStageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilsStageDto} deleteUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerDelete(deleteUtilsStageDto: DeleteUtilsStageDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsStageControllerDelete(deleteUtilsStageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUtilsStageDto} editUtilsStageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerEdit(editUtilsStageDto: EditUtilsStageDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsStageControllerEdit(editUtilsStageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStageControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilsStageControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsStageApi - object-oriented interface
 * @export
 * @class UtilsStageApi
 * @extends {BaseAPI}
 */
export class UtilsStageApi extends BaseAPI {
    /**
     * 
     * @param {CreateUtilsStageDto} createUtilsStageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStageApi
     */
    public utilsStageControllerCreate(createUtilsStageDto: CreateUtilsStageDto, options?: AxiosRequestConfig) {
        return UtilsStageApiFp(this.configuration).utilsStageControllerCreate(createUtilsStageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUtilsStageDto} deleteUtilsStageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStageApi
     */
    public utilsStageControllerDelete(deleteUtilsStageDto: DeleteUtilsStageDto, options?: AxiosRequestConfig) {
        return UtilsStageApiFp(this.configuration).utilsStageControllerDelete(deleteUtilsStageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUtilsStageDto} editUtilsStageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStageApi
     */
    public utilsStageControllerEdit(editUtilsStageDto: EditUtilsStageDto, options?: AxiosRequestConfig) {
        return UtilsStageApiFp(this.configuration).utilsStageControllerEdit(editUtilsStageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStageApi
     */
    public utilsStageControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return UtilsStageApiFp(this.configuration).utilsStageControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsStatusApi - axios parameter creator
 * @export
 */
export const UtilsStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUtilsStatusDto} createUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerCreate: async (createUtilsStatusDto: CreateUtilsStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUtilsStatusDto' is not null or undefined
            assertParamExists('utilsStatusControllerCreate', 'createUtilsStatusDto', createUtilsStatusDto)
            const localVarPath = `/api/v1/utils-status/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUtilsStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilsStatusDto} deleteUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerDelete: async (deleteUtilsStatusDto: DeleteUtilsStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilsStatusDto' is not null or undefined
            assertParamExists('utilsStatusControllerDelete', 'deleteUtilsStatusDto', deleteUtilsStatusDto)
            const localVarPath = `/api/v1/utils-status/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilsStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUtilsStatusDto} editUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerEdit: async (editUtilsStatusDto: EditUtilsStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUtilsStatusDto' is not null or undefined
            assertParamExists('utilsStatusControllerEdit', 'editUtilsStatusDto', editUtilsStatusDto)
            const localVarPath = `/api/v1/utils-status/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUtilsStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils-status/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsStatusApi - functional programming interface
 * @export
 */
export const UtilsStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsStatusDto} createUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStatusControllerCreate(createUtilsStatusDto: CreateUtilsStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStatusControllerCreate(createUtilsStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilsStatusDto} deleteUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStatusControllerDelete(deleteUtilsStatusDto: DeleteUtilsStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStatusControllerDelete(deleteUtilsStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditUtilsStatusDto} editUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStatusControllerEdit(editUtilsStatusDto: EditUtilsStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStatusControllerEdit(editUtilsStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsStatusControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsStatusControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsStatusApi - factory interface
 * @export
 */
export const UtilsStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsStatusApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsStatusDto} createUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerCreate(createUtilsStatusDto: CreateUtilsStatusDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsStatusControllerCreate(createUtilsStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilsStatusDto} deleteUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerDelete(deleteUtilsStatusDto: DeleteUtilsStatusDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsStatusControllerDelete(deleteUtilsStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUtilsStatusDto} editUtilsStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerEdit(editUtilsStatusDto: EditUtilsStatusDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsStatusControllerEdit(editUtilsStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsStatusControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilsStatusControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsStatusApi - object-oriented interface
 * @export
 * @class UtilsStatusApi
 * @extends {BaseAPI}
 */
export class UtilsStatusApi extends BaseAPI {
    /**
     * 
     * @param {CreateUtilsStatusDto} createUtilsStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStatusApi
     */
    public utilsStatusControllerCreate(createUtilsStatusDto: CreateUtilsStatusDto, options?: AxiosRequestConfig) {
        return UtilsStatusApiFp(this.configuration).utilsStatusControllerCreate(createUtilsStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUtilsStatusDto} deleteUtilsStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStatusApi
     */
    public utilsStatusControllerDelete(deleteUtilsStatusDto: DeleteUtilsStatusDto, options?: AxiosRequestConfig) {
        return UtilsStatusApiFp(this.configuration).utilsStatusControllerDelete(deleteUtilsStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUtilsStatusDto} editUtilsStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStatusApi
     */
    public utilsStatusControllerEdit(editUtilsStatusDto: EditUtilsStatusDto, options?: AxiosRequestConfig) {
        return UtilsStatusApiFp(this.configuration).utilsStatusControllerEdit(editUtilsStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsStatusApi
     */
    public utilsStatusControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return UtilsStatusApiFp(this.configuration).utilsStatusControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsUnitApi - axios parameter creator
 * @export
 */
export const UtilsUnitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUtilsUnitDto} createUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerCreate: async (createUtilsUnitDto: CreateUtilsUnitDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUtilsUnitDto' is not null or undefined
            assertParamExists('utilsUnitControllerCreate', 'createUtilsUnitDto', createUtilsUnitDto)
            const localVarPath = `/api/v1/utils-unit/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUtilsUnitDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilsUnitDto} deleteUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerDelete: async (deleteUtilsUnitDto: DeleteUtilsUnitDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilsUnitDto' is not null or undefined
            assertParamExists('utilsUnitControllerDelete', 'deleteUtilsUnitDto', deleteUtilsUnitDto)
            const localVarPath = `/api/v1/utils-unit/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilsUnitDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditUtilsUnitDto} editUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerEdit: async (editUtilsUnitDto: EditUtilsUnitDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUtilsUnitDto' is not null or undefined
            assertParamExists('utilsUnitControllerEdit', 'editUtilsUnitDto', editUtilsUnitDto)
            const localVarPath = `/api/v1/utils-unit/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUtilsUnitDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerGetDataAsList: async (search?: string, limit?: number, offset?: number, order?: object, filter?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils-unit/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth-client-secret required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-client-secret", configuration)

            // authentication oauth-token-code required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-code", configuration)

            // authentication oauth-token-refresh-token required
            await setApiKeyToObject(localVarHeaderParameter, "oauth-token-refresh-token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsUnitApi - functional programming interface
 * @export
 */
export const UtilsUnitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsUnitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsUnitDto} createUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsUnitControllerCreate(createUtilsUnitDto: CreateUtilsUnitDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsUnitControllerCreate(createUtilsUnitDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilsUnitDto} deleteUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsUnitControllerDelete(deleteUtilsUnitDto: DeleteUtilsUnitDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsUnitControllerDelete(deleteUtilsUnitDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditUtilsUnitDto} editUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsUnitControllerEdit(editUtilsUnitDto: EditUtilsUnitDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsUnitControllerEdit(editUtilsUnitDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilsUnitControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UtilsBrandControllerGetDataAsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilsUnitControllerGetDataAsList(search, limit, offset, order, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsUnitApi - factory interface
 * @export
 */
export const UtilsUnitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsUnitApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUtilsUnitDto} createUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerCreate(createUtilsUnitDto: CreateUtilsUnitDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsUnitControllerCreate(createUtilsUnitDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilsUnitDto} deleteUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerDelete(deleteUtilsUnitDto: DeleteUtilsUnitDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsUnitControllerDelete(deleteUtilsUnitDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EditUtilsUnitDto} editUtilsUnitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerEdit(editUtilsUnitDto: EditUtilsUnitDto, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.utilsUnitControllerEdit(editUtilsUnitDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {object} [order] 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilsUnitControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: any): AxiosPromise<UtilsBrandControllerGetDataAsList200Response> {
            return localVarFp.utilsUnitControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsUnitApi - object-oriented interface
 * @export
 * @class UtilsUnitApi
 * @extends {BaseAPI}
 */
export class UtilsUnitApi extends BaseAPI {
    /**
     * 
     * @param {CreateUtilsUnitDto} createUtilsUnitDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsUnitApi
     */
    public utilsUnitControllerCreate(createUtilsUnitDto: CreateUtilsUnitDto, options?: AxiosRequestConfig) {
        return UtilsUnitApiFp(this.configuration).utilsUnitControllerCreate(createUtilsUnitDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUtilsUnitDto} deleteUtilsUnitDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsUnitApi
     */
    public utilsUnitControllerDelete(deleteUtilsUnitDto: DeleteUtilsUnitDto, options?: AxiosRequestConfig) {
        return UtilsUnitApiFp(this.configuration).utilsUnitControllerDelete(deleteUtilsUnitDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EditUtilsUnitDto} editUtilsUnitDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsUnitApi
     */
    public utilsUnitControllerEdit(editUtilsUnitDto: EditUtilsUnitDto, options?: AxiosRequestConfig) {
        return UtilsUnitApiFp(this.configuration).utilsUnitControllerEdit(editUtilsUnitDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {object} [order] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsUnitApi
     */
    public utilsUnitControllerGetDataAsList(search?: string, limit?: number, offset?: number, order?: object, filter?: object, options?: AxiosRequestConfig) {
        return UtilsUnitApiFp(this.configuration).utilsUnitControllerGetDataAsList(search, limit, offset, order, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


