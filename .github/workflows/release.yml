name: Release

on:
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 20
      - name: Install all dependencies
        run: npm ci

      - name: Semantic-release
        id: semantic_release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Do something when a new release published
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.last_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}

      - name: Determine new version
        id: version
        run: |
          if [ -n "${{ steps.semantic_release.outputs.new_release_version }}" ]; then
            echo "::set-output name=NEW_VERSION::${{ steps.semantic_release.outputs.new_release_version }}"
          else
            echo "::set-output name=NEW_VERSION::${{ steps.semantic_release.outputs.last_release_version }}"
          fi

      - name: Update .env with new version and values
        run: |
          newVersion=$(echo "${{ steps.version.outputs.NEW_VERSION }}" | sed 's/v//')
          currentDate=$(date +'%Y%m%d')
          echo "REACT_APP_SEMANTIC_VERSION=${newVersion}" >> .env
          echo "REACT_APP_BUILD_VERSION=${currentDate}.1" >> .env
          echo "REACT_APP_API_URL=gso-api" >> .env

      - name: Build
        run: npm run build
        env:
          CI: false

      - name: Copy .htaccess files
        run: cp -r .htaccess build/
      
      - name: Push
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: release # The branch name where you want to push the assets
          FOLDER: build # The directory where your assets are generated
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}